//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalService")]
    public interface ICalService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/add", ReplyAction="http://tempuri.org/ICalService/addResponse")]
        double add(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/add", ReplyAction="http://tempuri.org/ICalService/addResponse")]
        System.Threading.Tasks.Task<double> addAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/sub", ReplyAction="http://tempuri.org/ICalService/subResponse")]
        double sub(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/sub", ReplyAction="http://tempuri.org/ICalService/subResponse")]
        System.Threading.Tasks.Task<double> subAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/div", ReplyAction="http://tempuri.org/ICalService/divResponse")]
        double div(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/div", ReplyAction="http://tempuri.org/ICalService/divResponse")]
        System.Threading.Tasks.Task<double> divAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/mul", ReplyAction="http://tempuri.org/ICalService/mulResponse")]
        double mul(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalService/mul", ReplyAction="http://tempuri.org/ICalService/mulResponse")]
        System.Threading.Tasks.Task<double> mulAsync(double a, double b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ICalServiceChannel : ServiceReference1.ICalService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class CalServiceClient : System.ServiceModel.ClientBase<ServiceReference1.ICalService>, ServiceReference1.ICalService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CalServiceClient() : 
                base(CalServiceClient.GetDefaultBinding(), CalServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICalService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CalServiceClient.GetBindingForEndpoint(endpointConfiguration), CalServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CalServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CalServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public double add(double a, double b)
        {
            return base.Channel.add(a, b);
        }
        
        public System.Threading.Tasks.Task<double> addAsync(double a, double b)
        {
            return base.Channel.addAsync(a, b);
        }
        
        public double sub(double a, double b)
        {
            return base.Channel.sub(a, b);
        }
        
        public System.Threading.Tasks.Task<double> subAsync(double a, double b)
        {
            return base.Channel.subAsync(a, b);
        }
        
        public double div(double a, double b)
        {
            return base.Channel.div(a, b);
        }
        
        public System.Threading.Tasks.Task<double> divAsync(double a, double b)
        {
            return base.Channel.divAsync(a, b);
        }
        
        public double mul(double a, double b)
        {
            return base.Channel.mul(a, b);
        }
        
        public System.Threading.Tasks.Task<double> mulAsync(double a, double b)
        {
            return base.Channel.mulAsync(a, b);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICalService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICalService))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:7214/CalcService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CalServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICalService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CalServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICalService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICalService,
        }
    }
}
